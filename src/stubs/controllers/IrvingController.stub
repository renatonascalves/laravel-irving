<?php

namespace {{namespace}}Http\Controllers;

use {{namespace}}Http\Controllers\Controller;
use Illuminate\Http\Request;
use Irving\Middleware\ForceTrailingSlashes;

class IrvingController extends Controller
{
	/**
	 * Current request.
	 *
	 * @var Illuminate\Http\Request
	 */
	public $request = null;

	/**
	 * Path being queried.
	 *
	 * @var string
	 */
	public $path = '';

	/**
	 * Context of request.
	 *
	 * @var string
	 */
	public $context = 'page';

	/**
	 * All request parameters.
	 *
	 * @var array
	 */
	public $params = [];

	/**
	 * All non-irving request parameters.
	 *
	 * @var array
	 */
	public $custom_params = [];

	/**
	 * Query string.
	 *
	 * @var string
	 */
	public $query_string = '';

	/**
	 * Query generated by path.
	 *
	 * @var null
	 */
	public $query = null;

	/**
	 * Data for response.
	 *
	 * @var array
	 */
	public $data = [
		'defaults'       => [],
		'page'           => [],
		'providers'      => [],
		'redirectTo'     => '',
		'redirectStatus' => 0,
	];

	/**
     * Instantiate the Irving controller.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware(ForceTrailingSlashes::class);
    }

	/**
	 * Callback for the route.
	 *
	 * @param Illuminate\Http\Request $request Request object.
	 * @return array
	 */
	public function routing(Request $request): array
	{
		// Path and context are required.
		$request->validate([
			'path'    => 'required',
			'context' => 'required',
		]);

		$this->request = $request;
		$this->params  = $request->all();
		$this->path    = $this->params['path'] ?? '';
		$this->context = $this->params['context'] ?? '';

		// Pass any extra included params.
		$this->custom_params = array_filter(
			$this->params,
			function( $key ) {
				return ! in_array( $key, [ 'path', 'context' ], true );
			},
			ARRAY_FILTER_USE_KEY
		);

		// @todo Pending implementation.
		// $this->query = $this->build_query();

		return $this->get_data();
	}

	/**
	 * Build the query.
	 *
	 * @return array
	 */
	public function build_query(): array {}

	/**
	 * Get response data.
	 *
	 * @return array
	 */
	protected function get_data(): array
	{
		// Build defaults.
		if ( 'site' === $this->context ) {
			$this->data['defaults'] = [
				new \Irving\Components\Head(),
				new \Irving\Components\Body(),
			];
		}

		// Begin building a head instance for this page.
		$head = new \Irving\Components\Head();

		// Build page.
		switch ( true ) {

			/**
			 * Error Page.
			 */
			default:
				$head->set_title( '404 - Page not Found' );
				$template = ( new \Irving\Components\Templates\Error() );
				break;
		}

		// If the template is invalid, also 404.
		if ( false === $template->is_valid ) {
			$head->set_title( '404 - Page not Found' );
			$template = ( new \Irving\Components\Templates\Error() );
		}

		// Setup the page data based on routing.
		$this->data['page'] = $template->to_array()['children'];

		// Unshift the head to the top.
		array_unshift( $this->data['page'], $head );

		return $this->data;
	}
}
